// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  avatar    String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth fields
  emailVerified DateTime?
  image         String?

  // Relations
  projects    Project[]    @relation("ProjectMembers")
  ownedProjects Project[]  @relation("ProjectOwner")
  tasks       Task[]       @relation("TaskAssignee")
  createdTasks Task[]      @relation("TaskCreator")
  comments    Comment[]
  activities  Activity[]
  accounts    Account[]
  sessions    Session[]
  messages    Message[]    @relation("MessageAuthor")
  likedMessages MessageLike[]
  followers   UserFollow[] @relation("UserFollowers")
  following   UserFollow[] @relation("UserFollowing")
  teamMemberships TeamMember[]
  teamMessages   TeamMessage[]
  ownedTeams     Team[]        @relation("TeamOwner")
  notifications  Notification[]

  @@map("users")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Int      @default(0)

  // Relations
  authorId      String
  author        User       @relation("MessageAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  // Réponses (self-relation)
  replyToId     String?
  repliedTo     Message?   @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: Cascade)
  replies       Message[]  @relation("MessageReplies")

  // Méta d'affichage pour réponse
  replyToAuthor String?

  likedBy       MessageLike[]
  images        MessageImage[]

  @@map("messages")
}

model MessageImage {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())

  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_images")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())

  owner   User       @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members TeamMember[]
  chats   TeamChat[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamChat {
  id        String   @id @default(cuid())
  teamId    String
  name      String
  createdAt DateTime @default(now())

  team     Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  messages TeamMessage[]

  @@map("team_chats")
}

model TeamMessage {
  id        String   @id @default(cuid())
  chatId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())

  chat   TeamChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("team_messages")
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model UserFollow {
  id           String @id @default(cuid())
  followerId   String
  followingId  String

  follower User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model MessageLike {
  id        String  @id @default(cuid())
  userId    String
  messageId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
  @@map("message_likes")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3b82f6")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     User[]   @relation("ProjectMembers")
  tasks       Task[]
  activities  Activity[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(todo)
  priority    Priority   @default(medium)
  dueDate     DateTime?
  estimatedHours Float?
  actualHours   Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdById String
  createdBy   User       @relation("TaskCreator", fields: [createdById], references: [id])
  comments    Comment[]
  activities  Activity[]
  attachments Attachment[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  // Relations
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  description String
  metadata  String?      // JSON string for additional data
  createdAt DateTime     @default(now())

  // Relations
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("activities")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum TaskStatus {
  todo
  doing
  done
  archived
}

enum Priority {
  low
  medium
  high
  urgent
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_ASSIGNED
  TASK_COMPLETED
  COMMENT_ADDED
  PROJECT_CREATED
  USER_JOINED
  USER_LEFT
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  data      Json?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
